///  PROBLEM LINK -> https://leetcode.com/problems/binary-tree-level-order-traversal/

// # Intuition (BFS)
// Using queue seemed to be the best option to keep track of elements in every level.

// # Approach
// We will use a queue and a vector<vector<int>> res to store the final answer.

// if the root is NULL we will return res. else we will do q.push(root).
// then for every iteration in while(!q.empty()), we will create a vector<int> temp to store elements of particular level.
// also we will pop the elements from the queue once we store it in the vector and push the current element's 
// left child and right child if present. At last we will return res.



// # Complexity
// - Time complexity:
// O(N) where n is the number of nodes in the binary tree.

// - Space complexity:
// S.C -> O(N) where n is the number of nodes in the binary tree.

# Code
```
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> res;
        if(root == NULL)return res;
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            int n = q.size();
            vector<int> temp;
            for(int i=0; i<n; i++){
                TreeNode* cur = q.front();
                q.pop();
                temp.push_back(cur->val);
                if(cur->left)q.push(cur->left);
                if(cur->right)q.push(cur->right);
            }
            res.push_back(temp);
        }
        return res;
    }
};
```
