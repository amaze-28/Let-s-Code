///  PROBLEM LINK -> https://leetcode.com/problems/binary-tree-postorder-traversal/

// # Intuition
// Since in postorder traversal, we first print left child, then the right child, and at last the root data.
// We did simple recursion.

// # Approach
// Since it is a recursion problem.
// We will make a void function with TreeNode* root and vector<int> res as arguments where vector<int> res will be the answer.

// In recursion function,
// For base case, if(root == NULL) return;
// and rest, we will call function for f(root->left) and 
// then, we will call function for  f(root->right)
// and at last we will pushback root->data in vector. 


// # Complexity
// - Time complexity:
// O(n) where n is the number of nodes.

// - Space complexity:
// S.C -> If we donâ€™t consider the size of the stack for function calls then O(1) otherwise O(h) where h is the height of the tree.
// Note: The height of the skewed tree is n (no. of elements) so the worst space complexity is O(N) and 
// the height is (Log N) for the balanced tree so the best space complexity is O(Log N).

# Code
```
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    void f(TreeNode* root, vector<int>&res){
        if(root == NULL)return;
        f(root->left, res);
        f(root->right, res);
        res.push_back(root->val);
    }
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> res;
        f(root, res);
        return res;
    }
};
```
